# -*- coding: utf-8 -*-
"""crtrain.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_mJmFRnuhygYMCYBp0wlqroduRkRSbi4
"""

import pandas as pd
import numpy as np
from nltk.tokenize import word_tokenize
from nltk import pos_tag
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.preprocessing import LabelEncoder
from collections import defaultdict
from nltk.corpus import wordnet as wn
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import model_selection, svm
from sklearn.metrics import accuracy_score

data = pd.read_csv('crtrain.csv')

from sklearn.utils import shuffle
data = shuffle(data)

print(data)

import nltk
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('averaged_perceptron_tagger')
nltk.download('stopwords')

# Step - a : Remove blank rows if any.
data['sentences'].dropna(inplace=True)
# Step - b : Change all the sentences to lower case. This is required as python interprets 'dog' and 'DOG' differently
data['sentences'] = [entry.lower() for entry in data['sentences']]
print(data['sentences'])

# Step - c : Remove all special symbols 
s_list = []
import re
for sentence in data['sentences']:
    for k in sentence.split("\n"):
        s_list.append(re.sub(r"[^a-zA-Z0-9]+", ' ', k))

# Find the name of the column by index
n = data.columns[0]
# Drop that column
data.drop(n, axis = 1, inplace = True)

# Put whatever series you want in its place
data[n] = s_list

# Step - d : Tokenization : In this each entry in the data will be broken into set of words
data['sentences']= [word_tokenize(entry) for entry in data['sentences']]
print(data)

# Step - e : Remove Stop words, Non-Numeric and perfom Word Stemming/Lemmenting.
# WordNetLemmatizer requires Pos tags to understand if the word is noun or verb or adjective etc. By default it is set to Noun
tag_map = defaultdict(lambda : wn.NOUN)
tag_map['J'] = wn.ADJ
tag_map['V'] = wn.VERB
tag_map['R'] = wn.ADV

for index,entry in enumerate(data['sentences']):
    # Declaring Empty List to store the words that follow the rules for this step
    Final_words = []
    # Initializing WordNetLemmatizer()
    word_Lemmatized = WordNetLemmatizer()
    # pos_tag function below will provide the 'tag' i.e if the word is Noun(N) or Verb(V) or something else.
    for word, tag in pos_tag(entry):
        # Below condition is to check for Stop words and consider only alphabets
        if word.isalpha():
            word_Final = word_Lemmatized.lemmatize(word,tag_map[tag[0]])
            Final_words.append(word_Final)
    # The final processed set of words for each iteration will be stored in 'sentences_final'
    data.loc[index,'sentences_final'] = str(Final_words)

print(data)
Train_X, Test_X, Train_Y, Test_Y = model_selection.train_test_split(data['sentences_final'],data['label'],test_size=0.3)

print(Test_X)

Encoder = LabelEncoder()
Train_Y = Encoder.fit_transform(Train_Y)
Test_Y = Encoder.fit_transform(Test_Y)

Tfidf_vect = TfidfVectorizer(max_features=5000)
Tfidf_vect.fit(data['sentences_final'])
Train_X_Tfidf = Tfidf_vect.transform(Train_X)
Test_X_Tfidf = Tfidf_vect.transform(Test_X)

import pickle
# Dump the file
pickle.dump(Tfidf_vect, open("cr_features.pkl", "wb"))

print(Tfidf_vect.vocabulary_)

# Classifier - Algorithm - SVM
# fit the training dataset on the classifier
SVM = svm.SVC(C=1.0, kernel='linear', degree=3, gamma='auto')
SVM.fit(Train_X_Tfidf,Train_Y)
# predict the labels on validation dataset
predictions_SVM = SVM.predict(Test_X_Tfidf)
# Use accuracy_score function to get the accuracy
print("SVM Accuracy Score -> ",accuracy_score(predictions_SVM, Test_Y)*100)

from sklearn.externals import joblib 
  
# Save the model as a pickle in a file 
joblib.dump(SVM, 'cr_model.pkl') 
  
# Load the model from the file 
#cfcd = joblib.load('cfcd_model.pkl')